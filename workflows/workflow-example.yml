description: A sample workflow that demonstrates the bootstrap functionality with dynamic value capture
name: Sample Calimero Workflow

# Force pull Docker images even if they exist locally
force_pull_image: true
auth_service: true

nodes:
  chain_id: testnet-1
  count: 2
  image: ghcr.io/calimero-network/merod:edge
  prefix: calimero-node

steps:
  # Step 1: Install the application on the first node
  # This captures the application ID for use in subsequent steps
  - name: Install Application on Node 1
    type: install_application
    node: calimero-node-1
    path: logic/res/kv_store.wasm
    dev: true
    outputs:
      app_id: applicationId # Export 'applicationId' field as 'app_id'

  # Step 2: Create a context using the installed application
  # Uses the captured application ID from step 1
  - name: Create Context on Node 1
    type: create_context
    node: calimero-node-1
    application_id: "{{app_id}}"
    outputs:
      context_id: contextId # Export 'contextId' field as 'context_id'
      member_public_key: memberPublicKey # Export 'memberPublicKey' as 'member_public_key'

  # Step 3: Generate an identity on the second node
  # This captures the public key for use in invitation and joining
  - name: Create Identity on Node 2
    type: create_identity
    node: calimero-node-2
    outputs:
      public_key: publicKey # Export 'publicKey' as 'public_key'

  # Step 4: Wait for identity creation to complete
  - name: Wait for Identity Creation
    type: wait
    seconds: 5

  # Step 5: Invite the second node to join the context
  # Uses captured values: context ID, member public key, and identity public key
  - name: Invite Node 2 from Node 1
    type: invite_identity
    node: calimero-node-1
    context_id: "{{context_id}}"
    grantee_id: "{{public_key}}"
    granter_id: "{{member_public_key}}"
    capability: member
    outputs:
      invitation: invitation # Export 'invitation' as 'invitation'

  # Step 6: Join the context from the second node
  # Uses captured values: context ID, invitee identity, and invitation data
  - name: Join Context from Node 2
    type: join_context
    node: calimero-node-2
    context_id: "{{context_id}}"
    invitee_id: "{{public_key}}"
    invitation: "{{invitation}}"

  # Step 7: Player one submits their secret number
  - name: Submit Number - Player One
    type: call
    node: calimero-node-1
    context_id: "{{context_id}}"
    executor_public_key: "{{member_public_key}}"
    method: submit_number
    args:
      player_id: player_one
      number: 42
    outputs:
      player_one_submit: result # Export 'result' as 'player_one_submit'

  # Step 8: Give time for the submission to propagate
  - name: Wait After Player One Submit
    type: wait
    seconds: 2

  # Step 9: Player two submits their secret number
  - name: Submit Number - Player Two
    type: call
    node: calimero-node-2
    context_id: "{{context_id}}"
    executor_public_key: "{{public_key}}"
    method: submit_number
    args:
      player_id: player_two
      number: 36
    outputs:
      player_two_submit: result # Export 'result' as 'player_two_submit'

  # Step 10: Wait for submissions to sync before starting the game round
  - name: Wait Before Discover Phase
    type: wait
    seconds: 2

  # Step 11: Player one discovers player two's number (starts the turn cycle)
  - name: Discover Opponent - Player One
    type: call
    node: calimero-node-1
    context_id: "{{context_id}}"
    executor_public_key: "{{member_public_key}}"
    method: discover_number
    args:
      player_id: player_one
    outputs:
      player_one_discover: result # Export 'result' as 'player_one_discover'

  # Step 12: Wait for turn handoff
  - name: Wait After Player One Discover
    type: wait
    seconds: 2

  # Step 13: Player two discovers player one's number (completes the round)
  - name: Discover Opponent - Player Two
    type: call
    node: calimero-node-2
    context_id: "{{context_id}}"
    executor_public_key: "{{public_key}}"
    method: discover_number
    args:
      player_id: player_two
    outputs:
      player_two_discover: result # Export 'result' as 'player_two_discover'

  # Step 14: Fetch the final game state from node one
  - name: Fetch Final Game State
    type: call
    node: calimero-node-1
    context_id: "{{context_id}}"
    executor_public_key: "{{member_public_key}}"
    method: game_state
    args: {}
    outputs:
      final_state: result # Export 'result' as 'final_state'

# Configuration options
stop_all_nodes: false # Stop all nodes at the end of workflow
restart: true # Don't restart nodes at the beginning of workflow
nuke: false # Nuke the nodes at the end of the workflow
wait_timeout: 60
