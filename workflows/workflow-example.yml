description: A sample workflow that demonstrates the bootstrap functionality with dynamic value capture
name: Sample Calimero Workflow

# Force pull Docker images even if they exist locally
force_pull_image: true
auth_service: true

nodes:
  chain_id: testnet-1
  count: 2
  image: ghcr.io/calimero-network/merod:edge
  prefix: calimero-node

steps:
  # Step 1: Install the application on the first node
  # This captures the application ID for use in subsequent steps
  - name: Install Application on Node 1
    type: install_application
    node: calimero-node-1
    path: logic/res/kv_store.wasm
    dev: true
    outputs:
      app_id: applicationId # Export 'applicationId' field as 'app_id'

  # Step 2: Create a context using the installed application
  # Uses the captured application ID from step 1
  - name: Create Context on Node 1
    type: create_context
    node: calimero-node-1
    application_id: "{{app_id}}"
    outputs:
      context_id: contextId # Export 'contextId' field as 'context_id'
      member_public_key: memberPublicKey # Export 'memberPublicKey' as 'member_public_key'

  # Step 3: Generate an identity on the second node
  # This captures the public key for use in invitation and joining
  - name: Create Identity on Node 2
    type: create_identity
    node: calimero-node-2
    outputs:
      public_key: publicKey # Export 'publicKey' as 'public_key'

  # Step 4: Wait for identity creation to complete
  - name: Wait for Identity Creation
    type: wait
    seconds: 5

  # Step 5: Invite the second node to join the context
  # Uses captured values: context ID, member public key, and identity public key
  - name: Invite Node 2 from Node 1
    type: invite_identity
    node: calimero-node-1
    context_id: "{{context_id}}"
    grantee_id: "{{public_key}}"
    granter_id: "{{member_public_key}}"
    capability: member
    outputs:
      invitation: invitation # Export 'invitation' as 'invitation'

  # Step 6: Join the context from the second node
  # Uses captured values: context ID, invitee identity, and invitation data
  - name: Join Context from Node 2
    type: join_context
    node: calimero-node-2
    context_id: "{{context_id}}"
    invitee_id: "{{public_key}}"
    invitation: "{{invitation}}"

  # Step 7: Node 1 posts a chat message
  - name: Send Message from Node 1
    type: call
    node: calimero-node-1
    context_id: "{{context_id}}"
    executor_public_key: "{{member_public_key}}"
    method: send_message
    args:
      sender: "node1"
      role: "user"
      content: "Hello from node 1 ðŸ‘‹"
    outputs:
      node1_message: result # Export 'result' as 'node1_message'

  # Step 8: Give time for the message to propagate
  - name: Wait After Node 1 Message
    type: wait
    seconds: 2

  # Step 9: Node 2 posts a reply
  - name: Send Message from Node 2
    type: call
    node: calimero-node-2
    context_id: "{{context_id}}"
    executor_public_key: "{{public_key}}"
    method: send_message
    args:
      sender: "node2"
      role: "assistant"
      content: "Hi node 1, Calimero chat is up and running!"
    outputs:
      node2_message: result # Export 'result' as 'node2_message'

  # Step 10: Wait for propagation before reading history
  - name: Wait Before Fetching History
    type: wait
    seconds: 2

  # Step 11: Fetch chat history from node 1
  - name: Fetch Chat History
    type: call
    node: calimero-node-1
    context_id: "{{context_id}}"
    executor_public_key: "{{member_public_key}}"
    method: messages
    args:
      offset: 0
      limit: 20
    outputs:
      history_snapshot: result # Export 'result' as 'history_snapshot'

  # Step 12: Update max stored messages to a lower cap
  - name: Update Max Messages
    type: call
    node: calimero-node-2
    context_id: "{{context_id}}"
    executor_public_key: "{{public_key}}"
    method: set_max_messages
    args:
      max_messages: 100
    outputs:
      max_messages_update: result # Export 'result' as 'max_messages_update'

  # Step 13: Inspect contract info
  - name: Fetch Chat Info
    type: call
    node: calimero-node-1
    context_id: "{{context_id}}"
    executor_public_key: "{{member_public_key}}"
    method: info
    args: {}
    outputs:
      chat_info: result # Export 'result' as 'chat_info'

  # Step 14: Clear the history to reset the chat
  - name: Clear Chat History
    type: call
    node: calimero-node-1
    context_id: "{{context_id}}"
    executor_public_key: "{{member_public_key}}"
    method: clear_history
    args: {}
    outputs:
      cleared: result # Export 'result' as 'cleared'

  # Step 15: Confirm history is empty
  - name: Fetch History After Clear
    type: call
    node: calimero-node-1
    context_id: "{{context_id}}"
    executor_public_key: "{{member_public_key}}"
    method: messages
    args:
      offset: 0
      limit: 20
    outputs:
      cleared_history: result # Export 'result' as 'cleared_history'

# Configuration options
stop_all_nodes: false # Stop all nodes at the end of workflow
restart: true # Don't restart nodes at the beginning of workflow
nuke: false # Nuke the nodes at the end of the workflow
wait_timeout: 60
