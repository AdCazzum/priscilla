description: A sample workflow that demonstrates the bootstrap functionality with dynamic value capture
name: Sample Calimero Workflow

# Force pull Docker images even if they exist locally
force_pull_image: true
auth_service: true

nodes:
  chain_id: testnet-1
  count: 2
  image: ghcr.io/calimero-network/merod:edge
  prefix: calimero-node

steps:
  # Step 1: Install the application on the first node
  # This captures the application ID for use in subsequent steps
  - name: Install Application on Node 1
    type: install_application
    node: calimero-node-1
    path: logic/res/kv_store.wasm
    dev: true
    outputs:
      app_id: applicationId # Export 'applicationId' field as 'app_id'

  # Step 2: Create a context using the installed application
  # Uses the captured application ID from step 1
  - name: Create Context on Node 1
    type: create_context
    node: calimero-node-1
    application_id: "{{app_id}}"
    outputs:
      context_id: contextId # Export 'contextId' field as 'context_id'
      member_public_key: memberPublicKey # Export 'memberPublicKey' as 'member_public_key'

  # Step 3: Generate an identity on the second node
  # This captures the public key for use in invitation and joining
  - name: Create Identity on Node 2
    type: create_identity
    node: calimero-node-2
    outputs:
      public_key: publicKey # Export 'publicKey' as 'public_key'

  # Step 4: Wait for identity creation to complete
  - name: Wait for Identity Creation
    type: wait
    seconds: 5

  # Step 5: Invite the second node to join the context
  # Uses captured values: context ID, member public key, and identity public key
  - name: Invite Node 2 from Node 1
    type: invite_identity
    node: calimero-node-1
    context_id: "{{context_id}}"
    grantee_id: "{{public_key}}"
    granter_id: "{{member_public_key}}"
    capability: member
    outputs:
      invitation: invitation # Export 'invitation' as 'invitation'

  # Step 6: Join the context from the second node
  # Uses captured values: context ID, invitee identity, and invitation data
  - name: Join Context from Node 2
    type: join_context
    node: calimero-node-2
    context_id: "{{context_id}}"
    invitee_id: "{{public_key}}"
    invitation: "{{invitation}}"

  # Step 7: Initialise the guessing game
  - name: Create Game Session
    type: call
    node: calimero-node-1
    context_id: "{{context_id}}"
    executor_public_key: "{{member_public_key}}"
    method: create_game
    args:
      admin: "admin"
      player_one: "player-one"
      player_two: "player-two"
    outputs:
      game_setup: result

  # Step 8: Admin sets the secret word
  - name: Admin Sets Secret
    type: call
    node: calimero-node-1
    context_id: "{{context_id}}"
    executor_public_key: "{{member_public_key}}"
    method: set_secret
    args:
      requester: "admin"
      secret: "merobox"
    outputs:
      secret_update: result

  # Step 9: Give time for state propagation
  - name: Wait After Secret
    type: wait
    seconds: 2

  # Step 10: Player one asks a question
  - name: Player One Question
    type: call
    node: calimero-node-1
    context_id: "{{context_id}}"
    executor_public_key: "{{member_public_key}}"
    method: submit_question
    args:
      player: "player-one"
      content: "Qual Ã¨ il segreto custodito dal secondo giocatore?"
    outputs:
      player_one_question: result

  # Step 11: Wait before answer
  - name: Wait Before Answer
    type: wait
    seconds: 2

  # Step 12: Player two answers and makes a guess
  - name: Player Two Answer
    type: call
    node: calimero-node-2
    context_id: "{{context_id}}"
    executor_public_key: "{{public_key}}"
    method: submit_answer
    args:
      player: "player-two"
      content: "Sono convinto che la parola segreta sia merobox!"
      guess: "merobox"
    outputs:
      player_two_answer: result

  # Step 13: Wait for propagation before inspections
  - name: Wait Before Fetching State
    type: wait
    seconds: 2

  # Step 14: Fetch chat history from node 1
  - name: Fetch Conversation History
    type: call
    node: calimero-node-1
    context_id: "{{context_id}}"
    executor_public_key: "{{member_public_key}}"
    method: messages
    args:
      offset: 0
      limit: 20
    outputs:
      history_snapshot: result

  # Step 15: Inspect game status
  - name: Fetch Game Info
    type: call
    node: calimero-node-1
    context_id: "{{context_id}}"
    executor_public_key: "{{member_public_key}}"
    method: game_info
    args: {}
    outputs:
      game_info_snapshot: result

  # Step 16: Player two retrieves the secret
  - name: Player Two Reveal Secret
    type: call
    node: calimero-node-2
    context_id: "{{context_id}}"
    executor_public_key: "{{public_key}}"
    method: get_secret
    args:
      requester: "player-two"
    outputs:
      revealed_secret: result

  # Step 17: Clear the history to reset the chat
  - name: Clear Chat History
    type: call
    node: calimero-node-1
    context_id: "{{context_id}}"
    executor_public_key: "{{member_public_key}}"
    method: clear_history
    args:
      requester: "admin"
    outputs:
      cleared: result

  # Step 18: Confirm history is empty
  - name: Fetch History After Clear
    type: call
    node: calimero-node-1
    context_id: "{{context_id}}"
    executor_public_key: "{{member_public_key}}"
    method: messages
    args:
      offset: 0
      limit: 20
    outputs:
      cleared_history: result # Export 'result' as 'cleared_history'

# Configuration options
stop_all_nodes: false # Stop all nodes at the end of workflow
restart: true # Don't restart nodes at the beginning of workflow
nuke: false # Nuke the nodes at the end of the workflow
wait_timeout: 60
