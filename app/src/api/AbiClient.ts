/** @generated by @calimero/abi-codegen â€” DO NOT EDIT. */

import {
  CalimeroApp,
  Context,
} from '@calimero-network/calimero-client';

// Generated types

export interface DiscoverOutcome {
  opponent_number: number;
  game: GameView;
}

export type GamePhasePayload =
  | { name: 'Setup' }
  | { name: 'InProgress' }
  | { name: 'Finished' }

export const GamePhase = {
  Setup: (): GamePhasePayload => ({ name: 'Setup' }),
  InProgress: (): GamePhasePayload => ({ name: 'InProgress' }),
  Finished: (): GamePhasePayload => ({ name: 'Finished' }),
} as const;

export interface GameView {
  phase: GamePhase;
  current_turn: string | null;
  winner: string | null;
  players: PlayerView[];
}

export interface PlayerView {
  id: string;
  number: number | null;
  number_submitted: boolean;
  discovered: boolean;
}







export type AbiEvent =
  | { name: "PlayerRegistered" }
  | { name: "NumberSubmitted" }
  | { name: "NumberDiscovered" }
  | { name: "TurnChanged" }
  | { name: "GameFinished" }
  | { name: "GameReset" }
;


/**
 * Utility class for handling byte conversions in Calimero
 */
export class CalimeroBytes {
  private data: Uint8Array;

  constructor(input: string | number[] | Uint8Array) {
    if (typeof input === "string") {
      // Hex string
      this.data = new Uint8Array(
        input.match(/.{1,2}/g)?.map((byte) => parseInt(byte, 16)) || []
      );
    } else if (Array.isArray(input)) {
      // Number array
      this.data = new Uint8Array(input);
    } else {
      // Uint8Array
      this.data = input;
    }
  }

  toArray(): number[] {
    return Array.from(this.data);
  }

  toUint8Array(): Uint8Array {
    return this.data;
  }

  static fromHex(hex: string): CalimeroBytes {
    return new CalimeroBytes(hex);
  }

  static fromArray(arr: number[]): CalimeroBytes {
    return new CalimeroBytes(arr);
  }

  static fromUint8Array(bytes: Uint8Array): CalimeroBytes {
    return new CalimeroBytes(bytes);
  }
}

/**
 * Convert CalimeroBytes instances to arrays for WASM compatibility
 */
function convertCalimeroBytesForWasm(obj: any): any {
  if (obj === null || obj === undefined) {
    return obj;
  }

  if (obj instanceof CalimeroBytes) {
    return obj.toArray();
  }

  if (Array.isArray(obj)) {
    return obj.map(item => convertCalimeroBytesForWasm(item));
  }

  if (typeof obj === "object") {
    const result: any = {};
    for (const [key, value] of Object.entries(obj)) {
      result[key] = convertCalimeroBytesForWasm(value);
    }
    return result;
  }

  return obj;
}

/**
 * Convert arrays back to CalimeroBytes instances from WASM responses
 */
function convertWasmResultToCalimeroBytes(obj: any): any {
  if (obj === null || obj === undefined) {
    return obj;
  }

  if (Array.isArray(obj) && obj.every(item => typeof item === "number")) {
    return new CalimeroBytes(obj);
  }

  if (Array.isArray(obj)) {
    return obj.map(item => convertWasmResultToCalimeroBytes(item));
  }

  if (typeof obj === "object") {
    const result: any = {};
    for (const [key, value] of Object.entries(obj)) {
      result[key] = convertWasmResultToCalimeroBytes(value);
    }
    return result;
  }

  return obj;
}

export class AbiClient {
  private app: CalimeroApp;
  private context: Context;

  constructor(app: CalimeroApp, context: Context) {
    this.app = app;
    this.context = context;
  }

  /**
   * init
   */
  public async init(): Promise<void> {
    const response = await this.app.execute(this.context, 'init', {});
    if (response.success) {
      return response.result as void;
    } else {
      throw new Error(response.error || 'Execution failed');
    }
  }

  /**
   * submit_number
   */
  public async submitNumber(params: { player_id: string; number: number }): Promise<GameView> {
    const response = await this.app.execute(this.context, 'submit_number', params);
    if (response.success) {
      return response.result as GameView;
    } else {
      throw new Error(response.error || 'Execution failed');
    }
  }

  /**
   * discover_number
   */
  public async discoverNumber(params: { player_id: string }): Promise<DiscoverOutcome> {
    const response = await this.app.execute(this.context, 'discover_number', params);
    if (response.success) {
      return response.result as DiscoverOutcome;
    } else {
      throw new Error(response.error || 'Execution failed');
    }
  }

  /**
   * game_state
   */
  public async gameState(): Promise<GameView> {
    const response = await this.app.execute(this.context, 'game_state', {});
    if (response.success) {
      return response.result as GameView;
    } else {
      throw new Error(response.error || 'Execution failed');
    }
  }

  /**
   * start_new_game
   */
  public async startNewGame(): Promise<GameView> {
    const response = await this.app.execute(this.context, 'start_new_game', {});
    if (response.success) {
      return response.result as GameView;
    } else {
      throw new Error(response.error || 'Execution failed');
    }
  }

}